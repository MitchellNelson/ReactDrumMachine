{"version":3,"sources":["audio/Snare1.wav","audio/Clap1.wav","audio/Hi Hat1.wav","audio/Open Hihat.mp3","audio/Tamberine1.wav","DrumElement.js","DrumRow.js","Indicators.js","Drums.js","reducers/toolModeReducer.js","reducers/index.js","index.js","audio/Kick1.wav"],"names":["module","exports","DrumElement","props","state","isClicked","volume","sound","Howl","src","soundPath","handleClick","bind","handleChange","event","this","setState","target","value","volumeMode","volumeDisplay","console","log","type","min","max","step","orient","onChange","className","play","style","filter","brightness","onClick","React","Component","volumeIcon","icon","faSlidersH","DrumRow","elements","numElements","numMeasures","beatsPerMeasure","i","commonProps","playingIndex","push","name","renderRowElements","Indicators","class","renderElements","playIcon","faPlay","pauseIcon","faPause","startOverIcon","faStepBackward","Drums","useState","setPlayingIndex","playing","setPlaying","useEffect","ticker","setInterval","clearInterval","id","kick","snare","clap","hihat","openhihat","tamberine","toolModeReducer","action","combineReducers","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cb8fecfd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Snare1.f90bc65c.wav\";","module.exports = __webpack_public_path__ + \"static/media/Clap1.45bf1df8.wav\";","module.exports = __webpack_public_path__ + \"static/media/Hi Hat1.2c3bd2ef.wav\";","module.exports = __webpack_public_path__ + \"static/media/Open Hihat.85a0276d.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Tamberine1.a21c211d.wav\";","import React from 'react';\nimport {Howl, Howler} from 'howler';\nimport './audio/Kick1.wav';\n\nclass DrumElement extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      isClicked: false,\n      volume: 0.9,\n      sound: new Howl({\n          src: [this.props.soundPath]\n        })\n    }\n    this.handleClick = this.handleClick.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({volume: event.target.value});\n    this.setState({sound: new Howl({\n        src: [this.props.soundPath],\n        volume: event.target.value\n      })\n    });\n  }\n\n  handleClick() {\n    if (!this.props.volumeMode){\n      this.setState(state => ({\n        isClicked: !this.state.isClicked\n      }));\n    }\n  }\n\n  render() {\n    var volumeDisplay;\n    if (this.props.volumeMode && this.state.isClicked) {\n      console.log(\"volume Mode true!!\");\n      volumeDisplay = (<input \n        type=\"range\" min=\"0\" max=\"1\" step=\"0.1\" \n        value={this.state.volume} orient=\"vertical\"\n        onChange={this.handleChange}/>);\n    }\n    var className = 'drumElement notPlaying ';\n    className += this.state.isClicked ? 'isClicked' : '';\n\n    if (this.props.play && this.state.isClicked){\n      this.state.sound.play();\n    }\n\n    return (\n      <td style={{filter:'brightness('+ this.props.brightness + '%)'}}  onClick={this.handleClick} className={className}>\n        {volumeDisplay}\n      </td>\n    );\n  }\n}\n\nexport default DrumElement;\n","import React from 'react';\nimport DrumElement from './DrumElement';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSlidersH } from '@fortawesome/free-solid-svg-icons'\n\nconst volumeIcon = <FontAwesomeIcon icon={faSlidersH}/>\n\nclass DrumRow extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      volumeMode: false\n    }\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    this.setState(state => ({\n      volumeMode: !this.state.volumeMode\n    }));\n  }\n\n  renderRowElements() {\n    var elements = [];\n    var numElements = this.props.numMeasures * this.props.beatsPerMeasure;\n    for (var i = 0; i < numElements; i++){\n      var commonProps = {\n        soundPath: this.props.soundPath,\n        playingIndex: this.props.playingIndex,\n        volumeMode: this.state.volumeMode,\n        play: this.props.playingIndex === i,\n        brightness: 100 - ((i % this.props.beatsPerMeasure) * 10)\n      }\n      elements.push(<DrumElement {...commonProps}/>);\n    }\n    return elements;\n  }\n\n  render() {\n    return (\n      <tr>\n        <div>\n          <td>\n            {this.props.name}\n            <button onClick={this.handleClick}>{volumeIcon}</button>\n          </td>\n        </div>\n        {this.renderRowElements()}\n      </tr>\n    );\n  }\n}\n\nexport default DrumRow;","import React from 'react';\nimport {useState} from 'react'\n\nfunction Indicators(props){\n\n\tfunction renderElements(){\n\t\tvar elements = [<td></td>];\n    \tvar numElements = props.numMeasures * props.beatsPerMeasure;\n    \tfor (var i = 0; i < numElements; i++){\n    \t\tvar className = 'indicators ';\n    \t\tclassName += props.playingIndex === i ? 'playing' : 'notPlaying';\n       \t\telements.push(<td><center><div class={className}></div></center></td>);\n    \t}\n\t\treturn elements;\n\t}\n\t\n\treturn (<tr>{renderElements()}</tr>);\n}\n\nexport default Indicators;","import React from 'react';\nimport {useState, useEffect} from 'react'\nimport DrumRow from './DrumRow';\nimport Indicators from './Indicators';\nimport kick from './audio/Kick1.wav';\nimport snare from './audio/Snare1.wav';\nimport clap from './audio/Clap1.wav';\nimport hihat from './audio/Hi Hat1.wav';\nimport openhihat from './audio/Open Hihat.mp3';\nimport tamberine from './audio/Tamberine1.wav';\nimport {edit, select} from './actions';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faStepBackward, faPlay, faPause } from '@fortawesome/free-solid-svg-icons'\n\nconst playIcon = <FontAwesomeIcon icon={faPlay}/>;\nconst pauseIcon = <FontAwesomeIcon icon={faPause}/>;\nconst startOverIcon = <FontAwesomeIcon icon={faStepBackward}/>;\n\nfunction Drums(props){\n  const [bpm, setBPM] = useState(120);\n  const [beatsPerMeasure, setBeatsPerMeasure] = useState(4);\n  const [numMeasures, setNumMeasures] = useState(4);\n  const [playingIndex, setPlayingIndex] = useState(0);\n  const [playing, setPlaying] = useState(false);\n\n  useEffect(() => {\n    var ticker = setInterval( () => {\n      if (playing){\n        setPlayingIndex((playingIndex + 1) % (numMeasures * beatsPerMeasure));\n      }\n    }, 250 );\n    return function cleanup() {\n      clearInterval(ticker);\n    };\n  });\n\n  function togglePlaying() {\n    setPlaying(!playing);\n  }\n\n  function startOver() {\n    setPlayingIndex(0);\n  }\n\n  var commonProps = {\n    beatsPerMeasure: beatsPerMeasure,\n    numMeasures: numMeasures,\n    playingIndex: playingIndex\n  }\n  return (\n    <div>\n      <div id='controls'>\n        <button onClick={startOver}>{startOverIcon}</button>\n        <button onClick={togglePlaying}>{playing ? pauseIcon : playIcon}</button>\n      </div>\n      <table>\n        <tbody id='drums-body'>\n          <DrumRow name='Kick' {...commonProps} soundPath={kick}/>\n          <DrumRow name='Snare' {...commonProps} soundPath={snare}/>\n          <DrumRow name='Clap' {...commonProps} soundPath={clap}/>\n          <DrumRow name='HiHat' {...commonProps} soundPath={hihat}/>\n          <DrumRow name='Open HiHat' {...commonProps} soundPath={openhihat}/>\n          <DrumRow name='Tamberine' {...commonProps} soundPath={tamberine}/>\n          <Indicators {...commonProps}/>\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default Drums;\n\n","const toolModeReducer = (state = 'EDIT', action) => {\n\tswitch (action.type) {\n\t\tcase 'EDIT':\n\t\t\treturn 'EDIT'\n\t\tcase 'SELECT':\n\t\t\treturn 'SELECT'\n\t\tdefault: // need this for default case\n      \t\treturn state \n\t}\n}\nexport default toolModeReducer;","import toolModeReducer from './toolModeReducer';\nimport { combineReducers } from 'redux';\n\nconst allReducer = combineReducers({\n\ttoolModeReducer : toolModeReducer\n})\n\nexport default allReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Drums from './Drums';\nimport './styles/styles.css';\nimport './audio/Kick1.wav'\nimport { createStore }  from 'redux';\nimport allReducer from './reducers'\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n\t<Drums/>,\n\tdocument.getElementById('drums')\n);","module.exports = __webpack_public_path__ + \"static/media/Kick1.1dfc137c.wav\";"],"sourceRoot":""}